{"version":3,"sources":["components/AddTodo.js","components/ShowTodo.js","App.js","serviceWorker.js","index.js"],"names":["startCount","generateId","AddTodo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmitAction","event","storage","dispatch","type","todo","title","state","id","preventDefault","onChangeHandler","setState","target","value","react_default","a","createElement","onSubmit","onChange","Component","ShowTodo","changeHandler","prevState","showAll","todos","updatePage","bind","assertThisInitialized","_this2","subscribe","currentTodos","getState","displayTodos","filter","item","done","map","i","key","onClick","console","log","styledToDos","length","push","App","arguments","undefined","action","concat","toConsumableArray","objectSpread","index","createStore","reducerFunction","components_AddTodo","src_components_ShowTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a2431d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddToDo.css';\r\nlet startCount = 0;\r\n\r\nconst generateId = () => {\r\n    return startCount++;\r\n}\r\n\r\nclass AddTodo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todo: ''\r\n        }\r\n    }\r\n\r\n    onSubmitAction = (event) => {\r\n        this.props.storage.dispatch({ type: 'add', todo: { title: this.state.todo, id: generateId() } });\r\n        event.preventDefault();\r\n    }\r\n\r\n    onChangeHandler = (event) => {\r\n        this.setState({ todo: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"AddTodoForm\">\r\n                <form onSubmit={this.onSubmitAction} id=\"AddToDo\">\r\n                    <input type=\"text\" value={this.state.todo} onChange={this.onChangeHandler}></input>\r\n                    <button type=\"submit\">Add Todo</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\r\nimport './ShowTodo.css';\r\n\r\nclass ShowTodo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: [],\r\n            showAll: false\r\n        }\r\n        this.updatePage = this.updatePage.bind(this);\r\n    }\r\n    render() {\r\n        this.props.storage.subscribe(this.updatePage);\r\n        const currentTodos = this.props.storage.getState();\r\n        let displayTodos = [];\r\n\r\n        if (!currentTodos) {\r\n            return null;\r\n        }\r\n\r\n        if (!this.state.showAll) {\r\n            displayTodos = currentTodos.filter(item => !item.done);\r\n        } else {\r\n            displayTodos = currentTodos;\r\n        }\r\n\r\n        return<div>\r\n            <form>\r\n                <input type=\"checkbox\" onChange={this.changeHandler}></input>ShowAll\r\n            </form>\r\n            {displayTodos.map((item, i) => <div><span key={item.id} id=\"todo\" onClick={() => {\r\n                console.log('this is our clicked item...', item);\r\n                this.props.storage.dispatch({ type: 'done', id: item.id })\r\n            }}>{item.title}</span></div>)}</div>; \r\n           \r\n            \r\n            \r\n    }\r\n\r\n    updatePage() {\r\n        // this function will show all the data stored in todos\r\n        let styledToDos = [];\r\n\r\n        for (let i = 0; i < this.props.storage.getState().length; i++) {\r\n            if (!this.state.showAll) {\r\n                if (!this.props.storage.getState()[i].done) {\r\n                    styledToDos.push(this.props.storage.getState()[i]);\r\n                }\r\n            }\r\n            else {\r\n                styledToDos.push(this.props.storage.getState()[i]);\r\n            }\r\n        }\r\n\r\n        this.setState({ todos: styledToDos });\r\n    }\r\n\r\n    changeHandler = (event) => {\r\n        this.setState(prevState => ({ showAll: !prevState.showAll }));\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default ShowTodo;","import React, { Component } from 'react';\nimport { createStore } from 'redux';\nimport AddTodo from './components/AddTodo';\nimport './App.css';\nimport ShowTodo from './components/ShowTodo';\n\nclass App extends Component {\n\n  reducerFunction(state = [], action) {\n    switch (action.type) {\n      case 'add': {\n        return ([\n          ...state,\n          {\n            ...action.todo,\n            done: false\n          }\n        ]);\n      }\n      case 'done': {\n        let newState = state.map((item, index) => {\n          if (item.id === action.id) {\n            return {\n              ...item,\n              done: true\n            }\n          }\n          return item;\n        })\n        return newState;\n      }\n      default: {\n        return state;\n      }\n    }\n  }\n\n  render() {\n    let storage = createStore(this.reducerFunction);\n    return (\n      <div id=\"app\">\n        <AddTodo storage={storage}></AddTodo>\n        <ShowTodo storage={storage}></ShowTodo>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}