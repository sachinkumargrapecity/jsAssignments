{"version":3,"sources":["bookList.js","InformationShow.js","booksContainer.js","App.js","serviceWorker.js","index.js"],"names":["Book","_this","this","react_default","a","createElement","id","onClick","changeState","props","index","bookName","currentIndex","storage","dispatch","type","bookIndex","Component","BookList","createList","toReturn","currentState","_this2","booksStorage","getState","i","books","length","push","bookList_Book","key","name","InformationShow","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateBookInformation","currentBookIndex","currentBook","setState","author","date","state","subscribe","BooksContainer","fetchData","reducerForDataStore","arguments","undefined","action","assign","createStore","src_bookList","src_InformationShow_0","App","booksContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAEMA,0LACM,IAAAC,EAAAC,KACJ,OAAOC,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYC,QAAS,kBAAIN,EAAKO,YAAYP,EAAKQ,MAAMC,SAASR,KAAKO,MAAME,UAAkBR,EAAAC,EAAAC,cAAA,gDAG3GO,GACJV,KAAKO,MAAMI,QAAQC,SAAS,CAACC,KAAK,oBAAqBC,UAAWd,KAAKO,MAAMC,eANtEO,cA2BJC,6MAVPC,WAAa,WAGT,IAFA,IAAIC,EAAY,GACZC,EAAeC,EAAKb,MAAMc,aAAaC,WACnCC,EAAE,EAAEA,EAAEJ,EAAaK,MAAMC,OAAOF,IACpCL,EAASQ,KAAKzB,EAAAC,EAAAC,cAACwB,EAAD,CAAMC,IAAKL,EAAGd,SAAUU,EAAaK,MAAMD,GAAGM,KAAMrB,MAAOe,EAAGZ,QAASS,EAAKb,MAAMc,cAAeF,EAAaK,MAAMD,GAAGM,OAEzI,OAAOX,2EAXP,OAAOjB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACVJ,KAAKiB,qBAHCF,aC2BRe,qBApCf,SAAAA,EAAYvB,GAAM,IAAAR,EAAA,OAAAgC,OAAAC,EAAA,EAAAD,CAAA/B,KAAA8B,IACd/B,EAAAgC,OAAAE,EAAA,EAAAF,CAAA/B,KAAA+B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAnC,KAAMO,KAgBN6B,sBAAsB,WAClB,IAAIC,EAAmBtC,EAAKQ,MAAMc,aAAaC,WAAWgB,YAC1DvC,EAAKwC,SAAS,WAEV,MAAO,CACHV,KAAM9B,EAAKQ,MAAMc,aAAaC,WAAWE,MAAMa,GAAkBR,KACjEW,OAAOzC,EAAKQ,MAAMc,aAAaC,WAAWE,MAAMa,GAAkBG,OAClEC,KAAM1C,EAAKQ,MAAMc,aAAaC,WAAWE,MAAMa,GAAkBI,SAtB7E1C,EAAK2C,MAAQ,CACTb,KAAM9B,EAAKQ,MAAMc,aAAaC,WAAWE,MAAM,GAAGK,KAClDW,OAAOzC,EAAKQ,MAAMc,aAAaC,WAAWE,MAAM,GAAGgB,OACnDC,KAAM1C,EAAKQ,MAAMc,aAAaC,WAAWE,MAAM,GAAGiB,MALxC1C,wEAUV,OADAC,KAAKO,MAAMc,aAAasB,UAAU3C,KAAKoC,uBAC/BnC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eACZH,EAAAC,EAAAC,cAAA,YAAOH,KAAK0C,MAAMb,MAAY5B,EAAAC,EAAAC,cAAA,WAC9BF,EAAAC,EAAAC,cAAA,YAAOH,KAAK0C,MAAMF,QAAcvC,EAAAC,EAAAC,cAAA,WAChCF,EAAAC,EAAAC,cAAA,YAAOH,KAAK0C,MAAMD,MAAYxC,EAAAC,EAAAC,cAAA,8DAdZY,cCgDf6B,oNA3CXC,UAAY,WACR,MAAO,CACHP,YAAc,EACdd,MAAO,CACP,CACEK,KAAM,cACNW,OAAS,OACTC,KAAO,aAET,CACEZ,KAAM,MACNW,OAAS,OACTC,KAAO,aAET,CACEZ,KAAM,QACNW,OAAS,YACTC,KAAO,kBAMjBK,oBAAsB,WAAoC,IAAnCJ,EAAmCK,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAA3BhD,EAAK8C,YAAYI,EAAUF,UAAAtB,OAAA,EAAAsB,UAAA,QAAAC,EACtD,MAAmB,sBAAhBC,EAAOpC,KACKkB,OAAOmB,OAAO,GAAGR,EAAM,CAACJ,YAAYW,EAAOnC,YAEnD4B,2EAMP,IAAI/B,EAAUwC,YAAYnD,KAAK8C,qBAC/B,OAAO7C,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACPH,EAAAC,EAAAC,cAACiD,EAAD,CAAU/B,aAAcV,IACxBV,EAAAC,EAAAC,cAACkD,EAAD,CAAiBhC,aAAcV,YAtClBI,cCMduC,mLANX,OACErD,EAAAC,EAAAC,cAACoD,EAAD,aAHYxC,aCSEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.691bcaff.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './bookList.css';\r\nclass Book extends Component{\r\n    render(){\r\n        return <span><button id=\"bookTitle\" onClick={()=>this.changeState(this.props.index)}>{this.props.bookName}</button><br/></span>\r\n    }\r\n\r\n    changeState(currentIndex){\r\n            this.props.storage.dispatch({type:'changeCurrentBook', bookIndex: this.props.index});\r\n    }\r\n}\r\n\r\nclass BookList extends Component{\r\n        render(){\r\n            return <div id=\"bookList\">\r\n                {this.createList()}\r\n            </div>\r\n        }\r\n\r\n        createList = () =>{\r\n            let toReturn  = [];\r\n            let currentState = this.props.booksStorage.getState();\r\n            for(let i=0;i<currentState.books.length;i++){\r\n                toReturn.push(<Book key={i} bookName={currentState.books[i].name} index={i} storage={this.props.booksStorage}>{currentState.books[i].name}</Book>);\r\n            }\r\n            return toReturn;\r\n        }\r\n}\r\n\r\nexport default BookList;","import React, {Component} from 'react';\r\nimport './InformationShow.css';\r\nclass InformationShow extends Component{\r\nconstructor(props){\r\n    super(props);\r\n    this.state = {\r\n        name: this.props.booksStorage.getState().books[0].name,\r\n        author:this.props.booksStorage.getState().books[0].author,\r\n        date: this.props.booksStorage.getState().books[0].date\r\n    }\r\n}\r\n    render(){\r\n        this.props.booksStorage.subscribe(this.updateBookInformation);\r\n        return (<div id=\"information\">\r\n            <span>{this.state.name}</span><br/>\r\n            <span>{this.state.author}</span><br/>\r\n            <span>{this.state.date}</span><br/>\r\n        </div>);\r\n    }\r\n\r\n    updateBookInformation=()=>{\r\n        let currentBookIndex = this.props.booksStorage.getState().currentBook;\r\n        this.setState(()=>\r\n        {   \r\n            return {\r\n                name: this.props.booksStorage.getState().books[currentBookIndex].name,\r\n                author:this.props.booksStorage.getState().books[currentBookIndex].author,\r\n                date: this.props.booksStorage.getState().books[currentBookIndex].date\r\n            };\r\n        }   \r\n        );\r\n\r\n    }\r\n\r\n    currentBookData(){\r\n\r\n    }\r\n}\r\n\r\nexport default InformationShow;","import React, {Component} from 'react';\r\nimport {createStore} from 'redux';\r\nimport BookList from './bookList';\r\nimport InformationShow from './InformationShow';\r\nimport './container.css';\r\nclass BooksContainer extends Component{\r\n\r\n    fetchData = () =>{\r\n        return {\r\n            currentBook : 0,\r\n            books: [\r\n            {\r\n              name: 'On The Hill',\r\n              author : 'Shri',\r\n              date : 'Dec. 2010'\r\n            },\r\n            {\r\n              name: 'Sky',\r\n              author : 'Hari',\r\n              date : 'Oct. 2010'\r\n            },\r\n            {\r\n              name: 'Earth',\r\n              author : 'Premchand',\r\n              date : 'Jan. 2000'\r\n            }\r\n          ]\r\n        };\r\n    }\r\n\r\n    reducerForDataStore = (state = this.fetchData(),action) =>{\r\n        if(action.type === 'changeCurrentBook'){\r\n                return Object.assign({},state,{currentBook:action.bookIndex});\r\n        }\r\n        return state;\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        let storage = createStore(this.reducerForDataStore);\r\n        return <div id=\"container\">\r\n                <BookList booksStorage={storage}></BookList>\r\n                <InformationShow booksStorage={storage}></InformationShow>\r\n        </div>;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default BooksContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport BooksContainer from './booksContainer';\nclass App extends Component {\n  render() {\n    return (\n      <BooksContainer></BooksContainer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}